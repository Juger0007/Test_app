trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'
  webSiteName: 'Default Web Site'
  siteSubfolder: 'Test_app' 
  AppPool: 'Test_app' # La subcarpeta dentro del sitio web donde se desplegará el contenido
  publishPath: '$(Build.ArtifactStagingDirectory)/drop'

jobs:
- job: BuildAndPublish
  displayName: 'Build and Publish'
  steps:
  - task: DotNetCoreCLI@2
    displayName: 'Restore dependencies'
    inputs:
      command: 'restore'
      projects: '**/*.csproj'

  - task: DotNetCoreCLI@2
    displayName: 'Build project'
    inputs:
      command: 'build'
      projects: '**/*.csproj'
      arguments: '--configuration $(buildConfiguration)'

  - task: DotNetCoreCLI@2
    displayName: 'Run tests'
    inputs:
      command: 'test'
      projects: '**/*.csproj'
      arguments: '--configuration $(buildConfiguration) --no-build --verbosity normal'

  - task: DotNetCoreCLI@2
    displayName: 'Publish project'
    inputs:
      command: 'publish'
      projects: '**/*.csproj'
      arguments: '--configuration $(buildConfiguration) --output $(publishPath)'

  - task: ArchiveFiles@2
    displayName: 'Archive Published Files into ZIP'
    inputs:
      rootFolderOrFile: '$(publishPath)'   # Asegúrate de que esta ruta apunte a los archivos publicados
      includeRootFolder: false
      archiveFile: '$(publishPath)/$(Build.BuildId).zip'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifacts'
    inputs:
      PathtoPublish: '$(publishPath)/$(Build.BuildId).zip'
      ArtifactName: 'drop'
      publishLocation: 'Container'

- job: Deploy
  displayName: 'Deploy to IIS'
  dependsOn: BuildAndPublish
  pool:
    name: 'AeroMxlServer'
   
  steps:
  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: 'current'
      artifactName: 'drop'
      targetPath: '$(Pipeline.Workspace)/drop'

  - task: ExtractFiles@1
    displayName: 'Extract ZIP to Deployment Directory'
    inputs:
      archiveFilePatterns: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
      destinationFolder: '$(Pipeline.Workspace)/extracted'

  # Descomprime el ZIP dentro del ZIP
  - task: ExtractFiles@1
    displayName: 'Extract Inner ZIP'
    inputs:
      archiveFilePatterns: '$(Pipeline.Workspace)/extracted/*.zip'
      destinationFolder: '$(Pipeline.Workspace)/final_deploy'
  
  # Detener el Application Pool antes del despliegue
  - task: IISWebAppManagementOnMachineGroup@0
    displayName: 'Stop Application Pool'
    inputs:
      WebSiteName: '$(webSiteName)'  # Nombre del sitio web
      WebAppName: '$(siteSubfolder)'  # Nombre del Application Pool asociado a la subcarpeta
      Command: 'Stop'  # Detener el Application Pool

  - task: IISWebAppDeploymentOnMachineGroup@0
    inputs:
      WebSiteName: '$(webSiteName)'
      VirtualApplication: '$(siteSubfolder)'  # Especifica la subcarpeta dentro del sitio web
      Package: '$(Pipeline.Workspace)/final_deploy'
      EnableMSDeployAppOffline: true  # Esta línea es clave
      TakeAppOfflineFlag: true
      XmlTransformation: true
      RemoveAdditionalFilesFlag: true
      AdditionalArguments: '-allowUntrusted'
  
  # Iniciar el Application Pool despues del despliegue
  - task: IISWebAppManagementOnMachineGroup@0
    displayName: 'Start Application Pool'
    inputs:
      WebSiteName: '$(webSiteName)'  # Nombre del sitio web
      WebAppName: '$(siteSubfolder)'  # Nombre del Application Pool asociado a la subcarpeta
      Command: 'Start' 