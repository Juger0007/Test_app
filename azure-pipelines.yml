trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'
  webSiteName: 'Default Web Site'
  siteSubfolder: 'Test_app' 
  AppPool: 'Test_app' # Nombre del pool de aplicaciones
  publishPath: '$(Build.ArtifactStagingDirectory)/drop'

jobs:
- job: Build
  displayName: 'Build Projects'
  steps:

  - powershell: New-Item -ItemType Directory -Path "$(Pipeline.Workspace)\.nuget\packages" -Force
    displayName: 'Ensure NuGet packages directory exists'

  - task: Cache@2
    displayName: 'Cache NuGet packages'
    inputs:
      key: 'nuget | "$(Agent.OS)" | **/*.csproj'
      path: '$(Pipeline.Workspace)/.nuget/packages'
      restoreKeys: |
        nuget | "$(Agent.OS)"
      enabled: true
      verbose: true  # Habilita la salida detallada

  
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '8.0.x'  # Instala la última versión de .NET 8.0.x disponible
      installationPath: $(Agent.ToolsDirectory)/dotnet

  - task: DotNetCoreCLI@2
    displayName: 'Build project'
    inputs:
      command: 'build'
      projects: '**/*.csproj'
      arguments: '--configuration $(buildConfiguration)'

- job: Test
  displayName: 'Run Tests'
  dependsOn: Build
  steps:
  - task: DotNetCoreCLI@2
    displayName: 'Run tests'
    inputs:
      command: 'test'
      projects: '**/*.csproj'
      arguments: '--configuration $(buildConfiguration) --no-build --verbosity normal'

- job: Publish
  displayName: 'Publish Artifacts'
  dependsOn: Build
  steps:
  - task: DotNetCoreCLI@2
    displayName: 'Publish project'
    inputs:
      command: 'publish'
      projects: '**/*.csproj'
      arguments: '--configuration $(buildConfiguration) --output $(publishPath)'

  - task: ArchiveFiles@2
    displayName: 'Archive Published Files into ZIP'
    inputs:
      rootFolderOrFile: '$(publishPath)' 
      includeRootFolder: false
      archiveFile: '$(publishPath)/$(Build.BuildId).zip'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifacts'
    inputs:
      PathtoPublish: '$(publishPath)/$(Build.BuildId).zip'
      ArtifactName: 'drop'
      publishLocation: 'Container'

- job: Deploy
  displayName: 'Deploy to IIS'
  dependsOn: Publish
  pool:
    name: 'AeroMxlServer'
  
  steps:
  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: 'current'
      artifactName: 'drop'
      targetPath: '$(Pipeline.Workspace)/drop'

  - task: ExtractFiles@1
    displayName: 'Extract ZIP to Deployment Directory'
    inputs:
      archiveFilePatterns: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
      destinationFolder: '$(Pipeline.Workspace)/extracted'

  - task: ExtractFiles@1
    displayName: 'Extract Inner ZIP'
    inputs:
      archiveFilePatterns: '$(Pipeline.Workspace)/extracted/*.zip'
      destinationFolder: '$(Pipeline.Workspace)/final_deploy'

  - task: IISWebAppDeploymentOnMachineGroup@0
    inputs:
      WebSiteName: '$(webSiteName)'
      VirtualApplication: '$(siteSubfolder)'
      Package: '$(Pipeline.Workspace)/final_deploy'
      EnableMSDeployAppOffline: true
      TakeAppOfflineFlag: true
      XmlTransformation: true
      RemoveAdditionalFilesFlag: true
      AdditionalArguments: '-allowUntrusted'

- job: CleanUp
  displayName: 'Clean Up Temporary Files'
  dependsOn: Deploy
  pool:
    vmImage: 'windows-latest'
  
  steps:
  - task: DeleteFiles@1
    displayName: 'Remove Temporary Directories'
    inputs:
      SourceFolder: '$(Pipeline.Workspace)/drop'
      Contents: '**' 
      removeSourceFolder: true

  - task: DeleteFiles@1
    displayName: 'Remove Extracted Directory'
    inputs:
      SourceFolder: '$(Pipeline.Workspace)/extracted'
      Contents: '**'
      removeSourceFolder: true
